#version 400 core

in vec3 surfaceNormal;
in vec3 toLightVector;
in vec2 pass_textureCoords;
in vec3 toCameraVector;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColor;
uniform float reflectivity;
uniform float shine_damper;
uniform float intensity;

void main(void){

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	
	float nDotl = dot(unitNormal, unitLightVector);
	float brightness = max(nDotl, 0.3);
	vec3 diffuse = intensity * brightness * lightColor;

	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 lightDirection = -unitLightVector;
	
	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
	
	float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
	specularFactor = max(specularFactor, 0.0);
	float dampenedFactor = pow(specularFactor, shine_damper);
	
	vec3 finalSpecular = intensity * dampenedFactor * reflectivity * lightColor;

	vec4 textureColor = texture(textureSampler, pass_textureCoords);

	if(textureColor.a < 0.5){
		discard;
	}

	out_Color = vec4(diffuse, 1.0) * textureColor + vec4(finalSpecular, 1.0);
}