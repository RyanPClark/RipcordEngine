#version 400 core

in vec3 surfaceNormal;
in vec3 toLightVector;
in vec2 pass_textureCoords;
in vec3 toCameraVector;

out vec4 out_Color;

uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;

uniform vec3 lightColor;
uniform float intensity;

void main(void){

	vec4 blendmapColor = texture(blendMap, pass_textureCoords);

	float backTextureAmount = 1 - (blendmapColor.r + blendmapColor.g + blendmapColor.b);
	vec2 tiledCoords = pass_textureCoords * 40.0;
	
	vec4 backgroundTextureColor = texture(backgroundTexture, tiledCoords) * backTextureAmount;
	vec4 rTextureColor = texture(rTexture, tiledCoords) * blendmapColor.r;
	vec4 gTextureColor = texture(gTexture, tiledCoords) * blendmapColor.g;
	vec4 bTextureColor = texture(bTexture, tiledCoords) * blendmapColor.b;

	vec4 totalColor = backgroundTextureColor + rTextureColor + gTextureColor + bTextureColor;

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	
	float nDotl = dot(unitNormal, unitLightVector);
	float brightness = max(nDotl, 0.3);
	vec3 diffuse = intensity * brightness * lightColor;

	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 lightDirection = -unitLightVector;
	
	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);

	out_Color = vec4(diffuse, 1.0) * totalColor;
}