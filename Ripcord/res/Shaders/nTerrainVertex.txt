#version 400 core

in vec3 position;
in vec2 textureCoords;
in vec3 normal;

out vec3 surfaceNormal;
out vec2 pass_textureCoords;
out vec3 toLightVector;
out vec3 toCameraVector;
out vec4 shadowCoords;

uniform mat4 transformation_matrix;
uniform mat4 projection_matrix;
uniform mat4 view_matrix;
uniform mat4 toShadowMapSpace;

uniform vec3 lightPosition;

const float shadowDistance = 200.0;
const float transitionDistance = 10.0;

void main(void){

	vec4 worldPosition = transformation_matrix * vec4(position, 1.0);
	shadowCoords = toShadowMapSpace * worldPosition;
	
	vec4 positionRelativeToCamera = view_matrix * worldPosition;
	
	gl_Position = projection_matrix * positionRelativeToCamera;
	pass_textureCoords = textureCoords;
	
	surfaceNormal = (transformation_matrix * vec4(normal, 0.0)).xyz;
	toLightVector = lightPosition - worldPosition.xyz;
	toCameraVector = (inverse(view_matrix) * vec4(0.0, 0.0, 0.0, 1.0)).xyz - worldPosition.xyz;
	
	float distance = length(positionRelativeToCamera.xyz);
	
	distance = distance - (shadowDistance - transitionDistance);
	distance = distance / transitionDistance;
	
	shadowCoords.w = clamp(1.0 - distance, 0.0, 1.0);
}